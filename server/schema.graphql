# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  submissions(where: SubmissionWhereInput! = {}, orderBy: [SubmissionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Submission!]
  submissionsCount(where: SubmissionWhereInput! = {}): Int
  favorites(where: FavoriteWhereInput! = {}, orderBy: [FavoriteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Favorite!]
  favoritesCount(where: FavoriteWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  submissions: SubmissionManyRelationFilter
  favorites: FavoriteManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input SubmissionManyRelationFilter {
  every: SubmissionWhereInput
  some: SubmissionWhereInput
  none: SubmissionWhereInput
}

input FavoriteManyRelationFilter {
  every: FavoriteWhereInput
  some: FavoriteWhereInput
  none: FavoriteWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  submissions: SubmissionRelateToManyForUpdateInput
  favorites: FavoriteRelateToManyForUpdateInput
  createdAt: DateTime
}

input SubmissionRelateToManyForUpdateInput {
  disconnect: [SubmissionWhereUniqueInput!]
  set: [SubmissionWhereUniqueInput!]
  create: [SubmissionCreateInput!]
  connect: [SubmissionWhereUniqueInput!]
}

input FavoriteRelateToManyForUpdateInput {
  disconnect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  submissions: SubmissionRelateToManyForCreateInput
  favorites: FavoriteRelateToManyForCreateInput
  createdAt: DateTime
}

input SubmissionRelateToManyForCreateInput {
  create: [SubmissionCreateInput!]
  connect: [SubmissionWhereUniqueInput!]
}

input FavoriteRelateToManyForCreateInput {
  create: [FavoriteCreateInput!]
  connect: [FavoriteWhereUniqueInput!]
}

type Site {
  id: ID!
  name: String
  slug: String
  link: String
  description: String
  portraitImage: ResponsiveImageFieldOutput
  landscapeImage: ResponsiveImageFieldOutput
  isFeatured: Boolean
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  favorites(where: FavoriteWhereInput! = {}, orderBy: [FavoriteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Favorite!]
  favoritesCount(where: FavoriteWhereInput! = {}): Int
  createdAt: DateTime
}

type ResponsiveImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ResponsiveImageExtension!
  url: String!
}

enum ResponsiveImageExtension {
  jpg
  png
  webp
  gif
}

input SiteWhereUniqueInput {
  id: ID
  slug: String
}

input SiteWhereInput {
  AND: [SiteWhereInput!]
  OR: [SiteWhereInput!]
  NOT: [SiteWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  link: StringFilter
  description: StringFilter
  isFeatured: BooleanFilter
  tags: TagManyRelationFilter
  categories: CategoryManyRelationFilter
  favorites: FavoriteManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input SiteOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  link: OrderDirection
  description: OrderDirection
  isFeatured: OrderDirection
  createdAt: OrderDirection
}

input SiteUpdateInput {
  name: String
  slug: String
  link: String
  description: String
  portraitImage: ResponsiveImageFieldInput
  landscapeImage: ResponsiveImageFieldInput
  isFeatured: Boolean
  tags: TagRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  favorites: FavoriteRelateToManyForUpdateInput
  createdAt: DateTime
}

input ResponsiveImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input SiteUpdateArgs {
  where: SiteWhereUniqueInput!
  data: SiteUpdateInput!
}

input SiteCreateInput {
  name: String
  slug: String
  link: String
  description: String
  portraitImage: ResponsiveImageFieldInput
  landscapeImage: ResponsiveImageFieldInput
  isFeatured: Boolean
  tags: TagRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  favorites: FavoriteRelateToManyForCreateInput
  createdAt: DateTime
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  slug: String
  sites(where: SiteWhereInput! = {}, orderBy: [SiteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Site!]
  sitesCount(where: SiteWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
  slug: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  sites: SiteManyRelationFilter
}

input SiteManyRelationFilter {
  every: SiteWhereInput
  some: SiteWhereInput
  none: SiteWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input TagUpdateInput {
  name: String
  slug: String
  sites: SiteRelateToManyForUpdateInput
}

input SiteRelateToManyForUpdateInput {
  disconnect: [SiteWhereUniqueInput!]
  set: [SiteWhereUniqueInput!]
  create: [SiteCreateInput!]
  connect: [SiteWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  slug: String
  sites: SiteRelateToManyForCreateInput
}

input SiteRelateToManyForCreateInput {
  create: [SiteCreateInput!]
  connect: [SiteWhereUniqueInput!]
}

type Category {
  id: ID!
  name: String
  slug: String
  sites(where: SiteWhereInput! = {}, orderBy: [SiteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Site!]
  sitesCount(where: SiteWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  sites: SiteManyRelationFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  sites: SiteRelateToManyForUpdateInput
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  sites: SiteRelateToManyForCreateInput
}

type Submission {
  id: ID!
  name: String
  link: String
  description: String
  status: String
  submitter: User
  createdAt: DateTime
}

input SubmissionWhereUniqueInput {
  id: ID
}

input SubmissionWhereInput {
  AND: [SubmissionWhereInput!]
  OR: [SubmissionWhereInput!]
  NOT: [SubmissionWhereInput!]
  id: IDFilter
  name: StringFilter
  link: StringFilter
  description: StringFilter
  status: StringFilter
  submitter: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input SubmissionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  link: OrderDirection
  description: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input SubmissionUpdateInput {
  name: String
  link: String
  description: String
  status: String
  submitter: UserRelateToOneForUpdateInput
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input SubmissionUpdateArgs {
  where: SubmissionWhereUniqueInput!
  data: SubmissionUpdateInput!
}

input SubmissionCreateInput {
  name: String
  link: String
  description: String
  status: String
  submitter: UserRelateToOneForCreateInput
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Favorite {
  id: ID!
  site: Site
  user: User
  createdAt: DateTime
}

input FavoriteWhereUniqueInput {
  id: ID
}

input FavoriteWhereInput {
  AND: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
  id: IDFilter
  site: SiteWhereInput
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input FavoriteOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input FavoriteUpdateInput {
  site: SiteRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
}

input SiteRelateToOneForUpdateInput {
  create: SiteCreateInput
  connect: SiteWhereUniqueInput
  disconnect: Boolean
}

input FavoriteUpdateArgs {
  where: FavoriteWhereUniqueInput!
  data: FavoriteUpdateInput!
}

input FavoriteCreateInput {
  site: SiteRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
}

input SiteRelateToOneForCreateInput {
  create: SiteCreateInput
  connect: SiteWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSite(data: SiteCreateInput!): Site
  createSites(data: [SiteCreateInput!]!): [Site]
  updateSite(where: SiteWhereUniqueInput!, data: SiteUpdateInput!): Site
  updateSites(data: [SiteUpdateArgs!]!): [Site]
  deleteSite(where: SiteWhereUniqueInput!): Site
  deleteSites(where: [SiteWhereUniqueInput!]!): [Site]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createSubmission(data: SubmissionCreateInput!): Submission
  createSubmissions(data: [SubmissionCreateInput!]!): [Submission]
  updateSubmission(where: SubmissionWhereUniqueInput!, data: SubmissionUpdateInput!): Submission
  updateSubmissions(data: [SubmissionUpdateArgs!]!): [Submission]
  deleteSubmission(where: SubmissionWhereUniqueInput!): Submission
  deleteSubmissions(where: [SubmissionWhereUniqueInput!]!): [Submission]
  createFavorite(data: FavoriteCreateInput!): Favorite
  createFavorites(data: [FavoriteCreateInput!]!): [Favorite]
  updateFavorite(where: FavoriteWhereUniqueInput!, data: FavoriteUpdateInput!): Favorite
  updateFavorites(data: [FavoriteUpdateArgs!]!): [Favorite]
  deleteFavorite(where: FavoriteWhereUniqueInput!): Favorite
  deleteFavorites(where: [FavoriteWhereUniqueInput!]!): [Favorite]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  sites(where: SiteWhereInput! = {}, orderBy: [SiteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Site!]
  site(where: SiteWhereUniqueInput!): Site
  sitesCount(where: SiteWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  submissions(where: SubmissionWhereInput! = {}, orderBy: [SubmissionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Submission!]
  submission(where: SubmissionWhereUniqueInput!): Submission
  submissionsCount(where: SubmissionWhereInput! = {}): Int
  favorites(where: FavoriteWhereInput! = {}, orderBy: [FavoriteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Favorite!]
  favorite(where: FavoriteWhereUniqueInput!): Favorite
  favoritesCount(where: FavoriteWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
